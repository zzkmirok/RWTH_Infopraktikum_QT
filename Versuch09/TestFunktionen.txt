/*
 * In dieser Datei finden Sie einige Beispiele für Funktions-Tests,
 * die im Versuch "GUI-Programmierung mit Qt" benötigt werden.
 */


// Einlesen der Benutzereingaben und Ausgabe auf der Konsole
testSimpleUi()
    QString pattern = "The user's input: %1";
    QString s = pattern.arg(ui->lineEdit->text());
    qDebug() << s;


// In der GUI zeichnen
testSimpleDrawing()
    scene.addRect(50, 20, 50, 100);


// Eine Stadt anlegen und zeichnen
testDrawCities()
    City c1("city c1", 20,50);
    c1.draw(scene);

// Hinzufügen von Städten zu einer Karte und Zeichnen der Städte über die Karte
testDrawMapWithCities()
    City c1("city c1", 20,50);
    map.addCity(&c1);
    map.draw(scene);

testDrawStreets()
testDrawMapWithStreets()
testRejectStreet()

// Einen Dialog anzeigen
testShowDialog()
    DialogAddCity dialog;
    int result = dialog.exec();
    qDebug() << QString("Dialog result: %1").arg(result);

// Diese Funktion testet, ob die Klasse Map das Interface "AbstractMap" korrekt implementiert.
void MainWindow::testAbstractMap()
{
    Map testMap;
    City *a = new City("a", 0, 0);
    City *b = new City("b", 0, 100);
    City *c = new City("c", 100, 300);
    Street *s = new Street(a, b);
    Street *s2 = new Street(b, c);


    qDebug() << "MapTest: Start Test of the Map";
    {
        qDebug() << "MapTest: adding wrong street";
        bool t1 = testMap.addStreet(s);
        if (t1) {
            qDebug() << "-Error: Street should not bee added, if cities have not been added.";
        }
    }

    {
        qDebug() << "MapTest: adding correct street";
        testMap.addCity(a);
        testMap.addCity(b);
        bool t1 = testMap.addStreet(s);
        if (!t1) {
            qDebug() << "-Error: It should be possible to add this street.";
        }
    }

    {
        qDebug() << "MapTest: findCity";
        City* city = testMap.findCity("a");
        if (city != a)
            qDebug() << "-Error: City a could not be found.";

        city = testMap.findCity("b");
        if (city != b)
            qDebug() << "-Error: City b could not be found.";

        city = testMap.findCity("c");
        if (city != nullptr)
            qDebug() << "-Error: If city could not be found 0 should be returned.";
    }

    testMap.addCity(c);
    testMap.addStreet(s2);

    {
        qDebug() << "MapTest: getOppositeCity";
        const City *city = testMap.getOppositeCity(s, a);
        if (city != b)
            qDebug() << "-Error: Opposite city should be b.";

        city = map.getOppositeCity(s, c);
        if (city != nullptr)
            qDebug() << "-Error: Opposite city for a city which is not linked by given street should be 0.";
    }

    {
        qDebug() << "MapTest: streetLength";
        double l = testMap.getLength(s2);
        double expectedLength = 223.6;
        // compare doubles with 5% tolerance
        if (l < expectedLength * 0.95 || l > expectedLength *1.05)
            qDebug() << "-Error: Street Length is not equal to the expected.";

    }

    {
        qDebug() << "MapTest: getStreetList";
        QVector<Street*> streetList1 = testMap.getStreetList(a);
        QVector<Street*> streetList2 = testMap.getStreetList(b);
        if (streetList1.size() != 1) {
            qDebug() << "-Error: One street should be found for city a.";
        }
        else if (*streetList1.begin() != s) {
                qDebug() << "-Error: The wrong street has been found for city a.";
        }

        if (streetList2.size() != 2)
            qDebug() << "-Error: Two streets should be found for city b.";
    }

    qDebug() << "MapTest: End Test of the Map.";
}


